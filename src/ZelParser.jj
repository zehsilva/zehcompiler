/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";
  DEBUG_PARSER =false;  static = true;}PARSER_BEGIN(ZelParser)import java.io.*;
import java.util.*;
public class ZelParser{
  public static HashMap<String,Simbolo>tab =new HashMap<String,Simbolo>();
  public static ArrayList<Item> lixo=new ArrayList<Item>();
  public static FileInputStream fp;  public static void main(String args []) throws ParseException  {      ZelParser analisador = null;
      System.out.print("ZEL Parser"+"\n Arquivo: "+args[0]+"\n");
      try {
        	 fp=new FileInputStream(args[0]);
         analisador = new ZelParser(fp);
         inicio();
         System.out.println(tab);
      }  
      catch(FileNotFoundException e) { 
         System.out.println("Erro: arquivo não encontrado "+args[0]);
      } 
      catch(TokenMgrError e) { 
         System.out.println("Erro léxico\n" + e.getMessage());
         analisador.ReInit(fp); 
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        analisador.ReInit(fp);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
      }
   } 
} PARSER_END(ZelParser)
SKIP:
{
  " "
  | "\t"
  | "\r"
}

SKIP : { 
     "!!" : comentario1
} 
<comentario1> SKIP: {
"\n" |
   <~[]> 
}
SKIP : {
  			"!#": comentario2
  	}

<comentario2> SKIP: { 
   "#!"| 
   <~[]> 
}
TOKEN : {
      < VAR_DCL: "vars" > |
      < TP_STRING: "string" >|
      < TP_REAL: "real" >|
      < TP_INT: "int" >|
      < TP_CHAR: "char" >|
      < TP_LIST: "list" >|
      < DOISP: ":" >|
      < PNTVIRG: ";" >    |
      < PNT: ".">|
      < ATRIB: "=" >|
      < VIRG: "," >|
      < ABRERET: "[" >|
      < FECHARET: "]" >|
      < ABREPAR: "(" >|
      < FECHAPAR: ")" >|
      < ARROBA: "@" >|
      < DOLLAR: "$" >|
      < IF : "if" >|
      < FI: "fi" >|
      < ELSE: "else" >|
      < IN: "in" >|
      < TO: "to" >|
      < STEP: "step" >|
      < FOREACH: "foreach" >|
      < WHILE: "while" >|
      < END: "end" >|
      < READ: "read" >|
      < PRINT: "print" >|
      < OPER_REL: (["!","=","<",">"])?"="|">"|"<" >|
      < PLUS: "+">|
      < MINUS: "-" >|
      < EXP: "^" >|
      < MULT: "*" >| 
      < DIV: "/">|
      < MOD: "%" >|
      < AND: "and" >|
      < NAND: "nand" >|
      < OR: "or" >|
      < NOR: "nor" >|
      < XOR: "xor" >|
      < NOT: "not" >|
      < NUM_REAL: (["0"-"9"])*"."(["0"-"9"])+ >|
      < NUM_INT: (["0"-"9"])+ >|
      < CHAR: "'"(~["'"])"'" >|
      < VAR:   ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])* >  |
      
      < EOL: "\n" >|
      < INDENT: "{" >|
      < DEDENT: "}" >|
      < STRING: "\""(~["\""])*"\"" >
}void inicio() throws SemanticException:{}
{
  corpo()<EOF>
}
void corpo() throws SemanticException :{}
{
    (decl())? cmds()
}

void decl() throws SemanticException:{}
{
  <VAR_DCL><DOISP> ( LOOKAHEAD(2) (vartype())? eoc() )*
}

void vartype() throws SemanticException :
{ArrayList<Item> lst=new ArrayList<Item>();Token t;char tipo1,tipo2;Simbolo s;}
{   tipo1=type() t=<VAR>   {
     SemanticActions.testaVarDcl(tab,t);
     s=new Simbolo(t.image,tipo1);
     tab.put(t.image,s); }
   (
     <ATRIB> tipo2=literal(lst)     {
       SemanticActions.verificaLadoDireito(tipo1,tipo2,t);
       s.setInicializada();
     }
   )?
   (
     <VIRG> t=<VAR>
     {
       SemanticActions.testaVarDcl(tab,t);
       s=new Simbolo(t.image,tipo1);
       tab.put(t.image,s);
     }
     (
       <ATRIB> tipo2=literal(lst)
       {
         SemanticActions.verificaLadoDireito(tipo1,tipo2,t);
         s.setInicializada();
       }
     )?
   )*
}

char type():{Token t;char s='_';boolean lista=false;}{  (<TP_LIST >{lista=true;})?
  (< TP_INT>{s='i';}
  |< TP_CHAR>{s='c';}
  |<TP_REAL>{s='r';}
  |<TP_STRING>{s='s';})
  {
    if(lista)
      s=Character.toUpperCase(s);
    return s;  }
}

void eoc():{}
{
  < EOL>|<PNTVIRG>
}

void cmds() throws SemanticException :{}
{  (    (ifcmd() | whilecmd() | foreach() | atrib() | entrada() | saida())? eoc() )*
}

//--------------------------------Atribuição e Expressões------------------------------------
void atrib() throws SemanticException:{Token t;char tipo1='_',tipo2;}
{  (
    LOOKAHEAD(2)
    t=<VAR>
    {
      if(tipo1=='_')      	  tipo1=SemanticActions.testaVar(tab,t);
      	else
      	{
      	  tipo2=SemanticActions.testaVar(tab,t);
      	  SemanticActions.verificaLadoDireito(tipo1,tipo2,t);      	}
    }
    <ATRIB>
  )+
  tipo2=expr()
  {SemanticActions.verificaLadoDireito(tipo1,tipo2,t);}
}

char expr() throws SemanticException :{char tipo;ArrayList<Item> lst=new ArrayList<Item>();}{  tipo=expr_aux(lst)
  {return tipo; }
}
char expr_aux(ArrayList<Item> expr_lst) throws SemanticException :{char tipo='i';}
{
  tipo=expr_and(expr_lst) ((<OR>|<XOR>|<NOR>) expr_and(expr_lst) {tipo='i';})*
  {return tipo; }
}
char expr_and(ArrayList<Item> expr_lst) throws SemanticException :{char tipo='i';}{  tipo=expr_bool(expr_lst) ((<AND>|<NAND>) expr_bool(expr_lst) {tipo='i';})*
  {return tipo;}
}
char expr_bool(ArrayList<Item> expr_lst) throws SemanticException :{char tipo1='n',tipo='_';Token t;}
{  tipo=expr_mod(expr_lst)
  (
    (
      t=<IN> tipo1=termo_concat(expr_lst)
      {SemanticActions.verificaInList(tipo,tipo1,t);tipo='i';}
    )
    |
    (
      t=<OPER_REL> tipo1=expr_mod(expr_lst)
      {SemanticActions.verificaTipoRelacional(tipo,tipo1,t,t.image);tipo='i';}
      
    )*
  )
  {return tipo;}
}
char expr_mod(ArrayList<Item> expr_lst) throws SemanticException :{char tipo1='n',tipo='_';Token t;}
{
  tipo=expr_soma(expr_lst)
  (
    t=<MOD> tipo1=expr_soma(expr_lst)
    {SemanticActions.verificaTipoMod(tipo1,tipo,t);tipo=tipo1;}
  )*
  {return tipo;}
}
char expr_soma(ArrayList<Item> expr_lst) throws SemanticException :{char tipo1,tipo='n';Token t;}{  tipo=expr_mult(expr_lst)
  ((t=<PLUS>|t=<MINUS>) tipo1=expr_mult(expr_lst)
  {SemanticActions.verificaTipoAritmetica(tipo1,tipo,t,t.image);tipo=tipo1;}
  )*
  {return tipo;}
}
char expr_mult(ArrayList<Item> expr_lst) throws SemanticException :{char tipo1,tipo='n';Token t;}{  tipo=expr_pow(expr_lst)
  (
    (t=<MULT>|t=<DIV>) tipo1=expr_pow(expr_lst)
    {SemanticActions.verificaTipoAritmetica(tipo1,tipo,t,t.image);tipo=tipo1;}
  )*
  {return tipo;}
}
char expr_pow(ArrayList<Item> expr_lst) throws SemanticException :{char tipo1,tipo;Token t;}
{  tipo=termo_not(expr_lst)
  (
    t=<EXP> tipo1=expr_pow(expr_lst)
    {SemanticActions.verificaTipoAritmetica(tipo1,tipo,t);}
  )?
  {return tipo;}
}
char termo_not(ArrayList<Item> expr_lst) throws SemanticException :{char tipo1,tipo;Token t;}
{  (
    (<NOT>)+termo_concat(expr_lst)
    {tipo='i';}
    |tipo=termo_concat(expr_lst)
  )
  {return tipo;}
}
char termo_concat(ArrayList<Item> expr_lst) throws SemanticException :{Token t;char tipo='s',tipo1='s';}
{  tipo=termo(expr_lst) (t=<PNT> tipo1=termo(expr_lst){SemanticActions.verificaConcat(tipo,tipo1,t);tipo='s';})*
  {return tipo;}
}

char termo(ArrayList<Item> expr_lst) throws SemanticException :{Token t;char tipo='_',tipo2='_';}
{
  (
    (<PLUS>|<MINUS>)?
    (
      t=<VAR>{tipo=SemanticActions.testaVarTipoInicializada(tab,t);}
      |tipo=simple_literal(expr_lst)
      |<ARROBA>{tipo='n';}<ABREPAR> expr_aux(expr_lst) <FECHAPAR>
      |<ABREPAR> tipo=expr_aux(expr_lst) <FECHAPAR>
    )
    |<STRING>{tipo='s';}
    |< DOLLAR>{tipo='s';}<ABREPAR> expr_aux(expr_lst) <FECHAPAR>
    |tipo=list(expr_lst)
  )
  {return tipo;}
}
//------------------------------Literais e Constantes-----------------------------------------
char literal(ArrayList<Item> expr_lst) throws SemanticException :{char tipo;}
{  (tipo=simple_literal(expr_lst)|tipo=list_literal(expr_lst)|<STRING>{tipo='s';})
  {    return tipo;
  }
}
char simple_literal(ArrayList<Item> expr_lst) throws SemanticException :{char tipo;}
{  (    <NUM_REAL>{tipo='r';}
    |<NUM_INT>{tipo='i';}
    |<CHAR>{tipo='c';})
  {return tipo;}
}
char list_literal(ArrayList<Item> expr_lst) throws SemanticException :{char tipo;}
{  <ABRERET>tipo=list_literal_elems(expr_lst)<FECHARET>
  {    return tipo;
  }
}
char list_literal_elems(ArrayList<Item> expr_lst) throws SemanticException :{Token t;char tipo1,tipo2;}
{  tipo1=list_literal_elem(expr_lst)
  (
    t=<VIRG>tipo2=list_literal_elem(expr_lst)
    {SemanticActions.verificaTipoLista(tipo1,tipo2,t);}
  )*
  {    return Character.toUpperCase(tipo1);
  }
}

char list_literal_elem(ArrayList<Item> expr_lst) throws SemanticException :{Token t;char tipo='s',tipo2='s';}
{
  (
    (tipo=simple_literal(expr_lst)|<STRING>{tipo='s';} )
    (t=<TO>
    tipo2=simple_literal(expr_lst){SemanticActions.verificaTipoIncr(tipo,tipo2,t);}
    t=<STEP>
    tipo2=simple_literal(expr_lst){SemanticActions.verificaTipoIncr(tipo,tipo2,t);})?
 ){return tipo;}  
}
//--------------------------------list-------------------------------------------------------
char list(ArrayList<Item> expr_lst) throws SemanticException :{Token t;char tipo='_',tipo1='_';}
{
  <ABRERET> tipo=list_elems(expr_lst) <FECHARET>
  {return tipo;}
}
char list_elems(ArrayList<Item> expr_lst) throws SemanticException:{Token t;char tipo='_',tipo2='_';}
{
  tipo=list_elem(expr_lst)
  (
    t=<VIRG>
    tipo2=list_elem(expr_lst)
    {SemanticActions.verificaTipoLista(tipo,tipo2,t);})*
  {return Character.toUpperCase(tipo);}
}
char list_elem(ArrayList<Item> expr_lst) throws SemanticException :{char tipo='_',tipo1='_',tipo2='_';Token t;}
{
  tipo=expr_aux(expr_lst)
  (
    t=<TO>
    tipo1=expr_aux(expr_lst){SemanticActions.verificaTipoIncr(tipo,tipo1,t);}
    <STEP>
    tipo2=expr_aux(expr_lst){SemanticActions.verificaTipoIncr(tipo,tipo2,t);}
  )?
  {return tipo;}
}
//------------------------------if,while e foreach---------------------------------------------
void ifcmd() throws SemanticException :{}
{  	<IF><ABREPAR>expr()<FECHAPAR><EOL>
  	<INDENT>corpo() <DEDENT>(<EOL>)?
  	(<ELSE><INDENT>corpo()<DEDENT>(<EOL>)?)?
  	<FI>
}
void whilecmd() throws SemanticException :{}
{  	<WHILE><ABREPAR>expr()<FECHAPAR><EOL>
  			<INDENT>corpo()<DEDENT>(<EOL>)?
  			<END>
}
void foreach() throws SemanticException:{Token t;char tipo;}
{  	<FOREACH><ABREPAR> <VAR> <IN> tipo=list(lixo) <FECHAPAR>
  	<INDENT> corpo() <DEDENT>(<EOL>)?
  	<END>
}

//----------------------------------Entrada e Saida------------------------------------------
void entrada() throws SemanticException :{}
{  	<READ>
  	<ABREPAR>
  					(<STRING><VIRG>)?(<VAR><VIRG>)+
  	<FECHAPAR>
}
void saida() throws SemanticException :{}
{  		<PRINT>				<ABREPAR> 					expr() (<VIRG> expr())? 				<FECHAPAR>
}