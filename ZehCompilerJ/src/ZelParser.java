/* Generated By:JavaCC: Do not edit this line. ZelParser.java */
import java.io.*;
import java.util.*;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
public class ZelParser implements ZelParserConstants {
/***TODO ZEL
1. Mudar a questão de várias quebras de linhas ou ";" para ser reconhecido como um token somente
<EOL: ("\n",";")+> ao invés de ter na gramática e vários LOOKAHEAD(2)
2. Variáveis não-inicializadas;
3. Variáveis inicializadas mas não utilizadas;
6. Implementar casting de tipos numéricos dentro do item, possivelmente terei que fazer a função
que compara os tipos para ver se são incompatíveis retornar um tipo para casting, aeh, devo passar
para a função addElemList e também criar um construtor com a informação de casting
******/

  public static HashMap<String,Simbolo>tab =new HashMap<String,Simbolo>();
  public static ArrayDeque<Item> lixo=new ArrayDeque<Item>();
  public static LinkedList<Comando> cmdlst=new LinkedList<Comando>();
  public static int stackLen=0;
  public static FileInputStream fp;
  public static void main(String args []) throws ParseException
  {
      ZelParser analisador = null;

      try {
                 fp=new FileInputStream(args[0]);
         analisador = new ZelParser(fp);
         cmdlst=inicio();
         //System.out.println(tab);

         String nclass=args[0].substring(0,args[0].indexOf("."));
         nclass=Character.toUpperCase(nclass.charAt(0))+nclass.substring(1);
         CodigoDestino cod=new CodigoDestino(nclass ,cmdlst,tab );


         //cod.geraCod();


                         System.out.print("ZEL Parser"+"\u005cn Arquivo: "+nclass+"\u005cn");
         CodigoDestino2 cod2=new CodigoDestino2(nclass ,cmdlst,tab );
         cod2.geraCod();
         System.out.println("Executando Assembler (Jasmin)");
         Process p = Runtime.getRuntime().exec("java -jar jasmin.jar  "+nclass+".j");
        //esta parte serve para ler as mensagens geradas pelo jasmin
         BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
         BufferedReader err=new BufferedReader(new InputStreamReader(p.getErrorStream()));
         String line="";

         while ((line = input.readLine()) != null || (line = err.readLine()) !=null )
         {
           System.out.println(line);
         }
         err.close();
         input.close();



         System.out.println("Gerando Jar");
         p = Runtime.getRuntime().exec("jar -cvfe "+nclass+".jar "+nclass+" "+nclass+".class ");

         input = new BufferedReader(new InputStreamReader(p.getInputStream()));
         err=new BufferedReader(new InputStreamReader(p.getErrorStream()));
         line="";

         while ((line = input.readLine()) != null || (line = err.readLine()) !=null )
         {
           System.out.println(line);
         }
         err.close();
         input.close();
      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo n\u00e3o encontrado "+args[0]);
      }
      catch(TokenMgrError e) {
         System.out.println("Erro l\u00e9xico\u005cn" + e.getMessage());
         analisador.ReInit(fp);
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        analisador.ReInit(fp);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
      }
   }

  static final public LinkedList<Comando> inicio() throws ParseException, SemanticException {
                                                       LinkedList<Comando> coms;
    coms = corpo();
    jj_consume_token(0);
    {if (true) return coms;}
    throw new Error("Missing return statement in function");
  }

  static final public LinkedList<Comando> corpo() throws ParseException, SemanticException {
                                                       LinkedList<Comando> com=new LinkedList<Comando>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR_DCL:
      decl();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    cmds(com);
    {if (true) return com;}
    throw new Error("Missing return statement in function");
  }

  static final public void decl() throws ParseException, SemanticException {
    jj_consume_token(VAR_DCL);
    jj_consume_token(DOISP);
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TP_STRING:
      case TP_REAL:
      case TP_INT:
      case TP_CHAR:
      case TP_LIST:
        vartype();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      eoc();
    }
  }

  static final public void vartype() throws ParseException, SemanticException {
 ArrayDeque<Item> lst=new ArrayDeque<Item>();Token t;char tipo1,tipo2;Simbolo s;
    tipo1 = type();
    t = jj_consume_token(VAR);
     SemanticActions.testaVarDcl(tab,t);
     s=new Simbolo(t.image,tipo1);
     tab.put(t.image,s);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIB:
      jj_consume_token(ATRIB);
      tipo2 = literal(lst);
       SemanticActions.verificaLadoDireito(tipo1,tipo2,t);
       s.setInicializada();
       SemanticActions.addCmdAtrib(cmdlst,t.image,lst);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(VIRG);
      t = jj_consume_token(VAR);
       SemanticActions.testaVarDcl(tab,t);
       s=new Simbolo(t.image,tipo1);
       tab.put(t.image,s);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIB:
        jj_consume_token(ATRIB);
        tipo2 = literal(lst);
         SemanticActions.verificaLadoDireito(tipo1,tipo2,t);
         s.setInicializada();
         SemanticActions.addCmdAtrib(cmdlst,t.image,lst);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    }
  }

  static final public char type() throws ParseException {
             Token t;char s='_';boolean lista=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TP_LIST:
      jj_consume_token(TP_LIST);
              lista=true;
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TP_INT:
      jj_consume_token(TP_INT);
             s='i';
      break;
    case TP_CHAR:
      jj_consume_token(TP_CHAR);
              s='c';
      break;
    case TP_REAL:
      jj_consume_token(TP_REAL);
             s='r';
      break;
    case TP_STRING:
      jj_consume_token(TP_STRING);
               s='s';
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if(lista)
      s=Character.toUpperCase(s);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public void eoc() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    case PNTVIRG:
      jj_consume_token(PNTVIRG);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void cmds(LinkedList<Comando> coms) throws ParseException, SemanticException {
                                                               LinkedList<Comando> coms1 = new LinkedList<Comando>();Comando com=new Comando();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PNTVIRG:
      case IF:
      case FOREACH:
      case WHILE:
      case READ:
      case PRINT:
      case VAR:
      case EOL:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOREACH:
      case WHILE:
      case READ:
      case PRINT:
      case VAR:
       com=null;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          com = ifcmd();
                    coms.add(com);
          break;
        case WHILE:
          com = whilecmd();
                        coms.add(com);
          break;
        case FOREACH:
          com = foreach();
                       coms.add(com);
          break;
        case VAR:
          com = atrib(coms);
          break;
        case READ:
          com = entrada();
                       coms.add(com);
          break;
        case PRINT:
          com = saida();
                     coms.add(com);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      eoc();
    }
  }

//--------------------------------Atribuição e Expressões------------------------------------
  static final public Comando atrib(LinkedList<Comando> coms) throws ParseException, SemanticException {
 Comando com=new Comando();Token t;char tipo1='_',tipo2,tipo='_';ArrayDeque<Item> lst=new ArrayDeque<Item>();
LinkedList<Comando> atribs=new LinkedList<Comando>();
    label_4:
    while (true) {
      t = jj_consume_token(VAR);
      if(tipo1=='_')
      {

          tipo1=SemanticActions.testaVar(tab,t);
          tipo=tipo1;
        }
        else
        {
          tipo2=SemanticActions.testaVar(tab,t);
          tipo=tipo2;
          SemanticActions.verificaLadoDireito(tipo1,tipo2,t);
        }
        com=new Comando(t.image);
        atribs.add(com);
      jj_consume_token(ATRIB);
      if (jj_2_2(2)) {
        ;
      } else {
        break label_4;
      }
    }
    lst=new ArrayDeque<Item>();
    tipo2 = expr(tipo,lst);
    SemanticActions.verificaLadoDireito(tipo1,tipo2,t);
    for(Comando c : atribs)
    {
      c.setExpr(lst);
      coms.add(c);
    }
    {if (true) return com;}
    throw new Error("Missing return statement in function");
  }

  static final public char expr(char tipoAtrib,ArrayDeque<Item> lst) throws ParseException, SemanticException {
                                                                          char tipo;
    tipo = expr_aux(lst);
    //System.out.println("SemOptmi = "+lst);
    SemanticActions.otimizaExp(lst,tipoAtrib);
    //System.out.println("lstfinal = "+lst);
    stackLen=SemanticActions.tamanhoMaxPilha(lst,stackLen);

    //System.out.println(lst);
    {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

  static final public char expr_aux(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                    Token t;char tipo='i';Item.op oper;
    tipo = expr_and(expr_lst);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
      case NOR:
      case XOR:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        t = jj_consume_token(OR);
             oper=Item.op.OR;
        break;
      case XOR:
        t = jj_consume_token(XOR);
               oper=Item.op.XOR;
        break;
      case NOR:
        t = jj_consume_token(NOR);
               oper=Item.op.NOR;
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr_and(expr_lst);
      tipo='i';
      SemanticActions.addItemLista(expr_lst,t.image,'o',oper);
    }
   {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

  static final public char expr_and(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                    Token t;char tipo='i';Item.op oper;
    tipo = expr_bool(expr_lst);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case NAND:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        t = jj_consume_token(AND);
               oper=Item.op.AND;
        break;
      case NAND:
        t = jj_consume_token(NAND);
                      oper=Item.op.NAND;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr_bool(expr_lst);
      tipo='i';
      SemanticActions.addItemLista(expr_lst,t.image,'o',oper);
    }
   {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

  static final public char expr_bool(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                     char tipo1='n',tipo='_';Token t;
    tipo = expr_mod(expr_lst);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
       ArrayDeque<Item> d=new ArrayDeque<Item>();
      t = jj_consume_token(IN);
      tipo1 = termo_concat(expr_lst);
        SemanticActions.verificaInList(tipo,tipo1,t);
        tipo='i';
        //SemanticActions.addItemLista(expr_lst,d,tipo1);

        SemanticActions.addItemLista(expr_lst,t.image,'o',Item.op.IN);
      break;
    default:
      jj_la1[16] = jj_gen;
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPER_REL:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_7;
        }
        t = jj_consume_token(OPER_REL);
        tipo1 = expr_mod(expr_lst);
        SemanticActions.verificaTipoRelacional(tipo,tipo1,t,t.image);
        tipo='i';
        if(t.image.equals(">"))
          SemanticActions.addItemLista(expr_lst,t.image,'o',Item.op.GT);
        if(t.image.equals(">="))
                  SemanticActions.addItemLista(expr_lst,t.image,'o',Item.op.GTEQ);
        if(t.image.equals("<"))
          SemanticActions.addItemLista(expr_lst,t.image,'o',Item.op.LS);
        if(t.image.equals("<="))
          SemanticActions.addItemLista(expr_lst,t.image,'o',Item.op.LSEQ);
        if(t.image.equals("=="))
          SemanticActions.addItemLista(expr_lst,t.image,'o',Item.op.EQ);
        if(t.image.equals("!="))
          SemanticActions.addItemLista(expr_lst,t.image,'o',Item.op.DIFF);
      }
    }
   {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

  static final public char expr_mod(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                    char tipo1='n',tipo='_';Token t;
    tipo = expr_soma(expr_lst);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOD:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      t = jj_consume_token(MOD);
      tipo1 = expr_soma(expr_lst);
      SemanticActions.verificaTipoMod(tipo1,tipo,t);
      tipo=tipo1;
      SemanticActions.addItemLista(expr_lst,t.image,'o',Item.op.MOD);
    }
   {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

  static final public char expr_soma(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                     char tipo1,tipo='n';Token t;
    tipo = expr_mult(expr_lst);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tipo1 = expr_mult(expr_lst);
    SemanticActions.verificaTipoAritmetica(tipo1,tipo,t,t.image);
    //tipo=tipo1;
    if(t.image.equals("+"))
           SemanticActions.addItemLista(expr_lst,t.image,'o',Item.op.ADD);
        else
           SemanticActions.addItemLista(expr_lst,t.image,'o',Item.op.SUB);
    //SemanticActions.addItemLista(expr_lst,t.image,'o');

    }
   {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

  static final public char expr_mult(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                     char tipo1,tipo='n';Token t;
    tipo = expr_pow(expr_lst);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        t = jj_consume_token(MULT);
        break;
      case DIV:
        t = jj_consume_token(DIV);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tipo1 = expr_pow(expr_lst);
      SemanticActions.verificaTipoAritmetica(tipo1,tipo,t,t.image);
      //tipo=tipo1;
      if(t.image.equals("*"))
           SemanticActions.addItemLista(expr_lst,t.image,'o',Item.op.MULT);
        else
           SemanticActions.addItemLista(expr_lst,t.image,'o',Item.op.DIV);
    }
   {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

  static final public char expr_pow(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                    char tipo1,tipo;Token t;
    tipo = termo_not(expr_lst);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXP:
      t = jj_consume_token(EXP);
      tipo1 = expr_pow(expr_lst);
     SemanticActions.verificaTipoAritmetica(tipo1,tipo,t);
    SemanticActions.addItemLista(expr_lst,t.image,'o',Item.op.EXP);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
   {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

  static final public char termo_not(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                     char tipo1,tipo;Token t;int counter=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      label_11:
      while (true) {
        t = jj_consume_token(NOT);
              counter++;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_11;
        }
      }
      termo_concat(expr_lst);
      tipo='i';
      if(counter%2==0)
      {
        SemanticActions.addItemLista(expr_lst,t.image,'o',Item.op.NOT);
        SemanticActions.addItemLista(expr_lst,t.image,'o',Item.op.NOT);
      }else
        SemanticActions.addItemLista(expr_lst,t.image,'o',Item.op.NOT);
      break;
    case ABRERET:
    case ABREPAR:
    case ARROBA:
    case DOLLAR:
    case PLUS:
    case MINUS:
    case NUM_REAL:
    case NUM_INT:
    case CHAR:
    case VAR:
    case STRING:
      tipo = termo_concat(expr_lst);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

  static final public char termo_concat(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                        Token t;char tipo='s',tipo1='s';
    tipo = termo(expr_lst);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PNT:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_12;
      }
      t = jj_consume_token(PNT);
      tipo1 = termo(expr_lst);
      SemanticActions.verificaConcat(tipo,tipo1,t);
      SemanticActions.addItemLista(expr_lst,".",'o',Item.op.CONCAT);
    }
   {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

  static final public char termo(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                 Token t;boolean minus=false;char tipo='_',tipo2='_';
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABREPAR:
    case ARROBA:
    case PLUS:
    case MINUS:
    case NUM_REAL:
    case NUM_INT:
    case CHAR:
    case VAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
          jj_consume_token(MINUS);
             minus=true;
          break;
        case PLUS:
          jj_consume_token(PLUS);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        t = jj_consume_token(VAR);
        tipo=SemanticActions.testaVarTipoInicializada(tab,t);
        if(minus)
                          SemanticActions.addItemLista(expr_lst,"0",'r');
        SemanticActions.addItemLista(expr_lst,t.image,'v');
        if(minus)
          SemanticActions.addItemLista(expr_lst,"-",'o',Item.op.SUB);
        break;
      case NUM_REAL:
      case NUM_INT:
      case CHAR:
        if(minus)
          SemanticActions.addItemLista(expr_lst,"0",'r');
        tipo = simple_literal(expr_lst);
        if(minus)
          SemanticActions.addItemLista(expr_lst,"-",'o',Item.op.SUB);
        break;
      case ARROBA:
        jj_consume_token(ARROBA);
        jj_consume_token(ABREPAR);
        expr_aux(expr_lst);
        jj_consume_token(FECHAPAR);
       tipo='r';SemanticActions.addItemLista(expr_lst,"@",'o',Item.op.ARROBA);
        break;
      case ABREPAR:
        jj_consume_token(ABREPAR);
        tipo = expr_aux(expr_lst);
        jj_consume_token(FECHAPAR);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case STRING:
      t = jj_consume_token(STRING);
     tipo='s';SemanticActions.addItemLista(expr_lst,t.image,tipo);
      break;
    case DOLLAR:
      t = jj_consume_token(DOLLAR);
      jj_consume_token(ABREPAR);
      expr_aux(expr_lst);
      jj_consume_token(FECHAPAR);
     tipo='s';SemanticActions.addItemLista(expr_lst,"$",'o',Item.op.DOLLAR);
      break;
    case ABRERET:
         ArrayDeque<Item> d=new ArrayDeque<Item>();
      tipo = list(d);
     SemanticActions.addItemLista(expr_lst,d,tipo);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

//------------------------------Literais e Constantes-----------------------------------------
  static final public char literal(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                   char tipo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM_REAL:
    case NUM_INT:
    case CHAR:
      tipo = simple_literal(expr_lst);
      break;
    case ABRERET:
      tipo = list_literal(expr_lst);
      break;
    case STRING:
      jj_consume_token(STRING);
                                                                      tipo='s';
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

  static final public char simple_literal(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                          Token t;char tipo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM_REAL:
      t = jj_consume_token(NUM_REAL);
                 tipo='r';
      break;
    case NUM_INT:
      t = jj_consume_token(NUM_INT);
                 tipo='i';
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
              tipo='c';
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    SemanticActions.addItemLista(expr_lst,t.image,tipo);
    {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

  static final public char list_literal(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                        char tipo;
    jj_consume_token(ABRERET);
    tipo = list_literal_elems(expr_lst);
    jj_consume_token(FECHARET);
    {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

  static final public char list_literal_elems(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                              Token t;char tipo1,tipo2;
    tipo1 = list_literal_elem(expr_lst);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_13;
      }
      t = jj_consume_token(VIRG);
      tipo2 = list_literal_elem(expr_lst);
     SemanticActions.verificaTipoLista(tipo1,tipo2,t);
    }
    {if (true) return Character.toUpperCase(tipo1);}
    throw new Error("Missing return statement in function");
  }

  static final public char list_literal_elem(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                             Token t;char tipo='s',tipo2='s';
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM_REAL:
    case NUM_INT:
    case CHAR:
      tipo = simple_literal(expr_lst);
      break;
    case STRING:
      jj_consume_token(STRING);
                                            tipo='s';
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TO:
      t = jj_consume_token(TO);
      tipo2 = simple_literal(expr_lst);
                                   SemanticActions.verificaTipoIncr(tipo,tipo2,t);
      t = jj_consume_token(STEP);
      tipo2 = simple_literal(expr_lst);
                                   SemanticActions.verificaTipoIncr(tipo,tipo2,t);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
   {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

//--------------------------------list-------------------------------------------------------
  static final public char list(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                Token t;char tipo='_',tipo1='_';
    jj_consume_token(ABRERET);
    tipo = list_elems(expr_lst);
    jj_consume_token(FECHARET);
    //System.out.println("lst "+ tipo);
    {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

  static final public char list_elems(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
 Token t;char tipo='_',tipo2='_';ArrayDeque<Item> d;
         d=new ArrayDeque<Item>();
    tipo = list_elem(d);
   SemanticActions.addItemLista(expr_lst,d,tipo);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_14;
      }
      t = jj_consume_token(VIRG);
     d=new ArrayDeque<Item>();
      tipo2 = list_elem(d);
      //System.out.println("d="+d);

      SemanticActions.addItemLista(expr_lst,d,tipo);
      //System.out.println("expr_lst="+expr_lst);
      SemanticActions.verificaTipoLista(tipo,tipo2,t);
    }
   {if (true) return Character.toUpperCase(tipo);}
    throw new Error("Missing return statement in function");
  }

  static final public char list_elem(ArrayDeque<Item> expr_lst) throws ParseException, SemanticException {
                                                                     char tipo='_',tipo1='_',tipo2='_';Token t;
    tipo = expr_aux(expr_lst);

    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TO:
      t = jj_consume_token(TO);
      tipo1 = expr_aux(lixo);
                         SemanticActions.verificaTipoIncr(tipo,tipo1,t);
      jj_consume_token(STEP);
      tipo2 = expr_aux(lixo);
                         SemanticActions.verificaTipoIncr(tipo,tipo2,t);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
   {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

//------------------------------if,while e foreach---------------------------------------------
  static final public Comando ifcmd() throws ParseException, SemanticException {
 ComandoIF com;
char tipo;
LinkedList<Comando> coms1=new LinkedList<Comando>();
LinkedList<Comando> coms2=new LinkedList<Comando>();
ArrayDeque<Item> lst=new ArrayDeque<Item>();
    jj_consume_token(IF);
    jj_consume_token(ABREPAR);
    tipo = expr('_',lst);
    jj_consume_token(FECHAPAR);
    jj_consume_token(EOL);
    jj_consume_token(INDENT);
    coms1 = corpo();
    jj_consume_token(DEDENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    SemanticActions.otimizaExp(lst,tipo);
    com=new ComandoIF(lst,coms1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      jj_consume_token(INDENT);
      coms2 = corpo();
      jj_consume_token(DEDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        jj_consume_token(EOL);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
           com.setCorpoElse(coms2);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(FI);
          {if (true) return com;}
    throw new Error("Missing return statement in function");
  }

  static final public Comando whilecmd() throws ParseException, SemanticException {
 ComandoCorpo com;
char tipo;
LinkedList<Comando> coms1=new LinkedList<Comando>();
ArrayDeque<Item> lst=new ArrayDeque<Item>();
    jj_consume_token(WHILE);
    jj_consume_token(ABREPAR);
    tipo = expr('_',lst);
    jj_consume_token(FECHAPAR);
    jj_consume_token(EOL);
    jj_consume_token(INDENT);
    coms1 = corpo();
    jj_consume_token(DEDENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    SemanticActions.otimizaExp(lst,tipo);
    com=new ComandoCorpo(lst, coms1);
    jj_consume_token(END);
                                  {if (true) return com;}
    throw new Error("Missing return statement in function");
  }

  static final public Comando foreach() throws ParseException, SemanticException {
 ComandoCorpo com;
Token t;
char tipo;
String varfor;
LinkedList<Comando> coms1=new LinkedList<Comando>();
ArrayDeque<Item> lst=new ArrayDeque<Item>();
    jj_consume_token(FOREACH);
    jj_consume_token(ABREPAR);
    t = jj_consume_token(VAR);
    jj_consume_token(IN);
           ArrayDeque<Item> d=new ArrayDeque<Item>();
    tipo = list(d);
    jj_consume_token(FECHAPAR);
          varfor=t.image;
          //SemanticActions.addItemLista(lst,t.image,'v');
          SemanticActions.addItemLista(lst,d,tipo);
          SemanticActions.testaVar(tab,t);
          //tipo=SemanticActions.testaVarTipoInicializada(tab,t);
          //SemanticActions.addItemLista(lst,"in",'o',Item.op.IN);

    jj_consume_token(INDENT);
    coms1 = corpo();
    jj_consume_token(DEDENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    SemanticActions.otimizaExp(lst,tipo);
    com=new ComandoCorpo(lst,varfor, coms1);
    jj_consume_token(END);
                  {if (true) return com;}
    throw new Error("Missing return statement in function");
  }

//----------------------------------Entrada e Saida------------------------------------------
  static final public Comando entrada() throws ParseException, SemanticException {
 ComandoEntrada com=null;
Token t;
String janela="ZEL Program";
ArrayDeque<String> listaVar=new ArrayDeque<String>();
    jj_consume_token(READ);
    jj_consume_token(ABREPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t = jj_consume_token(STRING);
                                            janela=t.image;
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    t = jj_consume_token(VAR);
                                                                                  SemanticActions.testaVar(tab,t);
                                                                                  listaVar.offerLast(t.image);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_15;
      }
      jj_consume_token(VIRG);
      t = jj_consume_token(VAR);
                                            SemanticActions.testaVar(tab,t);
                                            listaVar.offerLast(t.image);
    }
    jj_consume_token(FECHAPAR);
                  com=new ComandoEntrada(janela,listaVar);
                  {if (true) return com;}
    throw new Error("Missing return statement in function");
  }

  static final public Comando saida() throws ParseException, SemanticException {
 ComandoSaida com;
ArrayDeque<Item> lst=new ArrayDeque<Item>();
char tipo;
    jj_consume_token(PRINT);
    jj_consume_token(ABREPAR);
    tipo = expr('_',lst);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRG:
                   lst=new ArrayDeque<Item>();
      jj_consume_token(VIRG);
      tipo = expr('_',lst);
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    jj_consume_token(FECHAPAR);
                          com=new ComandoSaida(lst,tipo);
                          {if (true) return com;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(TP_STRING)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(TP_REAL)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(TP_CHAR)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(TP_INT)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(TP_LIST)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(VAR)) return true;
    if (jj_scan_token(ATRIB)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_19()) return true;
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ZelParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[45];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0xf800,0x80000,0x100000,0x80000,0x8000,0x7800,0x20000,0x8020000,0x8000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6a00000,0x40000,0x0,0x0,0x2800000,0x6a00000,0x200000,0x0,0x100000,0x0,0x80000000,0x100000,0x80000000,0x0,0x0,0x20000000,0x0,0x0,0x0,0x100000,0x100000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0xc00036,0x400036,0x400036,0x38000,0x38000,0x6000,0x6000,0x40,0x0,0x1000,0x180,0x180,0xc00,0xc00,0x200,0x40000,0x47c0180,0x0,0x180,0x180,0x780000,0x4780180,0x4380000,0x380000,0x0,0x4380000,0x0,0x0,0x0,0x800000,0x800000,0x0,0x800000,0x800000,0x4000000,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ZelParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ZelParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ZelParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ZelParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ZelParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ZelParser(ZelParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ZelParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 45; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
