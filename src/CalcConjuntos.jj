/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(CalcConjuntos)
public class CalcConjuntos{  public static void main(String args []) throws ParseException  {    CalcConjuntos parser = new CalcConjuntos(System.in);
    System.out.println("Calculadora de Conjuntos");    while (true)    {      System.out.print("#:-");      try      {        switch (CalcConjuntos.one_line())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        eg1.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(CalcConjuntos)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  < UNION : "U" >| < INTERSECT : "/\\" >| < CONTIDO : "c" >| < PERTENCE : "E" >
| < SEQ : "..." >}

TOKEN : /* COMMANDS */
{
  < ATRIB : "=" >
}TOKEN :{
  < ABRECH: "{" >
| < FECHACH: "}" >
| < ABREPAR: "(" >
| < FECHAPAR: ")" >
| < PNT_VIRG: ";" >
| < VIRG : "," >| < NUMERIC: (< DIGIT >)+ >
| < VAR : "_"(< LETTERS >)+ >
| < STRING : (~[])+ >| < #DIGIT : [ "0"-"9" ] >
| < #LETTERS: ["a"-"z"]|["A"-"Z"] >}int one_line() :{}{  <PNT_VIRG >   {    return 1;  }}

Conjunto expr_union(Tabela tab):{}
{
  (<VAR >|conj_constante())(< UNION > expr_inters(tab))*
}
Conjunto expr_inters(Tabela tab):{}
{
   (<VAR >|conj_constante())(< INTERSECT > termo_expr(tab) )*}
Conjunto termo_expr(Tabela tab):{}
{  (<VAR >|conj_constante()|<ABREPAR> expr_union(tab) <FECHAPAR>)
}boolean expr_bool(Tabela tab):{String val;}
{
  val=constante() (< CONTIDO >|< PERTENCE >) expr_union(tab)}
Conjunto conj_constante():{Conjunto c=null;Token t1;Token t2;String str;}
{  <ABRECH>
    str=constante()
    {
      c=new Conjunto(str);    }
  		  (
  		    <VIRG>
  		    (
  		      t1=<NUMERIC>(<SEQ>t2=<NUMERIC>  		      {
  		        int init; int fim;
  		        init=Integer.parseInt(t1.image);
  		        fim=Integer.parseInt(t2.image);
  		        if(init < fim)
  		      	  {  		      	    for(int i=init+1;i<=fim;i++)
  		      	    {
  		      	      c.add(i+"");  		      	    }
  		      	  }else
  		      	  {
  		      	    for(int i=init-1;i>=fim;i--)
  		      	    {
  		      	      c.add(""+i);
  		      	    }  		      	  }
  		       })?
  		      {c.add(t1.image);}
  		      |
  		      t1=<STRING>{c.add(t1.image);}  		        ))+
  <FECHACH>
  {    return c;
  }
}
  
String constante():{Token t;}
{
  (t=<STRING>|t= < NUMERIC >)
  {return t.image;}}
