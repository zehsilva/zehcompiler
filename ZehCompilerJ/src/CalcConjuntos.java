/* Generated By:JavaCC: Do not edit this line. CalcConjuntos.java */
import java.io.*;
public class CalcConjuntos implements CalcConjuntosConstants {
  public static void main(String args []) throws ParseException
  {
    try
    {

    CalcConjuntos parser = new CalcConjuntos (new FileInputStream("prog_fonte.my"));
    Tabela tab=new Tabela();
    System.out.println("Calculadora de Conjuntos");
    while (true)
    {
      System.out.print("#:-");
      try
      {
        String res=CalcConjuntos.one_line(tab);
        if("" == res) break;
        System.out.println(res);
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        CalcConjuntos.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo n\u00e3o encontrado");
      }
  }

  static final public String one_line(Tabela tab) throws ParseException {
 String ret="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABRECH:
    case ABREPAR:
    case NUMERIC:
    case VAR:
    case STRING:
      ret = comando(tab);
      jj_consume_token(PNT_VIRG);
    {if (true) return ret;}
      break;
    case 0:
    case PNT_VIRG:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PNT_VIRG:
        jj_consume_token(PNT_VIRG);
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                      {if (true) return "";}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String comando(Tabela tab) throws ParseException {
                            String ret="";String val="";Conjunto c1,c2;Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERIC:
    case STRING:
      val = constante();
      jj_consume_token(PERTENCE);
      c1 = expr_union(tab);
      ret=c1.contains(val)?"VERDADEIRO":"FALSO";
      break;
    case ABRECH:
    case ABREPAR:
    case VAR:
      c1 = expr_union(tab);
      ret=c1.toString();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTIDO:
        jj_consume_token(CONTIDO);
        c2 = expr_union(tab);
        ret=c2.containsAll(c1)?"VERDADEIRO":"FALSO";
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public Conjunto expr_union(Tabela tab) throws ParseException {
                                 Token t;Conjunto res,c1;
    res = expr_inters(tab);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNION:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
      jj_consume_token(UNION);
      c1 = expr_inters(tab);
      res=res.Union(c1);
    }
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public Conjunto expr_inters(Tabela tab) throws ParseException {
                                  Conjunto r;Conjunto c2;
    r = termo_expr(tab);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTERSECT:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(INTERSECT);
      c2 = termo_expr(tab);
      r=r.Intersect(c2);
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  static final public Conjunto termo_expr(Tabela tab) throws ParseException {
                                 Token t;Conjunto r=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      t = jj_consume_token(VAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIB:
        jj_consume_token(ATRIB);
        r = expr_union(tab);
        tab.addKeyValue(t.image,r);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
     r=tab.getValue(t.image);
      break;
    case ABRECH:
      r = conj_constante();
      break;
    case ABREPAR:
      jj_consume_token(ABREPAR);
      r = expr_union(tab);
      jj_consume_token(FECHAPAR);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  static final public Conjunto conj_constante() throws ParseException {
                           Conjunto c=new Conjunto();Token t1;Token t2;String str;
    jj_consume_token(ABRECH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERIC:
      t1 = jj_consume_token(NUMERIC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEQ:
        jj_consume_token(SEQ);
        t2 = jj_consume_token(NUMERIC);
                                     processaSeq(t1,t2,c);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
       c.add(t1.image);
      break;
    case STRING:
      t1 = jj_consume_token(STRING);
                  c.add(t1.image);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      jj_consume_token(VIRG);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERIC:
        t1 = jj_consume_token(NUMERIC);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEQ:
          jj_consume_token(SEQ);
          t2 = jj_consume_token(NUMERIC);
                        processaSeq(t1,t2,c);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
                       c.add(t1.image);
        break;
      case STRING:
        t1 = jj_consume_token(STRING);
                                  c.add(t1.image);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(FECHACH);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public String constante() throws ParseException {
                    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t = jj_consume_token(STRING);
      break;
    case NUMERIC:
      t = jj_consume_token(NUMERIC);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static public void processaSeq(Token t1,Token t2,Conjunto c) throws ParseException {
  int init; int fim;
  init=Integer.parseInt(t1.image);
  fim=Integer.parseInt(t2.image);
  if(init < fim)
  {
    for(int i=init+1;i<=fim;i++)
      c.add(""+i);
  }else
  {
    for(int i=init-1;i>=fim;i--)
      c.add(""+i);
  }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CalcConjuntosTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8001,0x26a801,0x80,0x262800,0x20,0x40,0x400,0x42800,0x200,0x220000,0x10000,0x200,0x220000,0x220000,};
   }

  /** Constructor with InputStream. */
  public CalcConjuntos(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CalcConjuntos(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CalcConjuntosTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CalcConjuntos(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CalcConjuntosTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CalcConjuntos(CalcConjuntosTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CalcConjuntosTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[22];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
