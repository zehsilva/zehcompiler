/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(InfixPosFixExt)public class InfixPosFixExt
{
  public static void main(String args []) throws ParseException
  {
    InfixPosFixExt parser = new InfixPosFixExt(System.in);
    System.out.println("Transformação de expressão infixa para pós-fixa");
    while (true)
    {
      
      System.out.print("Entre uma expressão infixa tipo \"1+(2+3)*4;\" :");
      try
      {
        String teste=InfixPosFixExt.one_line();
        if(""==teste) break;
        System.out.println(teste);
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        eg1.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(InfixPosFixExt)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < MOD: "mod" >
| < EXP: "^" >
}

TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

String one_line() :
{String str="";}
{
  str=sum() ";"
  {
    return str;
  }
| ";"
  {
    return "";
  }
}
String sum() :{String str1="";String str2="";}
{
  str2=term1() (< MOD > str1=term1())*
}

String term1() :
{Token  t;String str1="";String str2="";}
{
  str2=term2()
  (
    (
      t=< PLUS >
    | t=< MINUS >
    )
    str1=term2()
    {
      str2+=str1+t.image+" " ;
    }
  )*
  {
    return str2;
  }
}

String term2() :
{Token  t;String str1="";String str2="";}
{
  str2=unary()
  (
    (
      t=< MULTIPLY >
    | t=< DIVIDE >
    )
    str1=unary()
    {
      str2+=str1+t.image+" ";
    }
  )*
  {
    return str2;
  }
}

String unary() :
{Token t; String str="";}
{
  (t=< MINUS > str=element()) {return t.image+str;}
| str=element(){return str;}
}

String element() :
{Token t;String str="";}
{
  t=< CONSTANT >{return t.image+" ";}
| "(" str=sum() ")"  {return str;}
}
