/* Generated By:JavaCC: Do not edit this line. ZeLexTokenManager.java */
import java.io.*;

/** Token Manager. */
public class ZeLexTokenManager implements ZeLexConstants
{
    static Integer[] init_array = new Integer[] {new Integer(0)};
    static java.util.ArrayList<Integer> stack =
        new java.util.ArrayList<Integer>(java.util.Arrays.asList(init_array));
    static int peek() { return stack.get(stack.size() - 1); }
    static int pop() { return stack.remove(stack.size() - 1); }
    static void push(int i) { stack.add(i);}

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 32)
                     kind = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 116)
                     kind = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_5(0x1000L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      default :
         return 2;
   }
   return 2;
}
static private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      default :
         return 1;
   }
}
private static final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400000L) != 0L)
            return 4;
         if ((active0 & 0x7e03ff800fc000L) != 0L)
         {
            jjmatchedKind = 58;
            return 9;
         }
         if ((active0 & 0x800900L) != 0L)
            return 1;
         if ((active0 & 0x200006000000L) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0x7603f2000dc000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 1;
            }
            return 9;
         }
         if ((active0 & 0x8000d80020000L) != 0L)
            return 9;
         return -1;
      case 2:
         if ((active0 & 0x40372000dc000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
            return 9;
         }
         if ((active0 & 0x72008000020000L) != 0L)
            return 9;
         return -1;
      case 3:
         if ((active0 & 0x26000008000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
            return 9;
         }
         if ((active0 & 0x40112000d4000L) != 0L)
            return 9;
         return -1;
      case 4:
         if ((active0 & 0x2000008000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
            return 9;
         }
         if ((active0 & 0x24000000000L) != 0L)
            return 9;
         return -1;
      case 5:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
            return 9;
         }
         if ((active0 & 0x8000L) != 0L)
            return 9;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 60);
      case 33:
         return jjMoveStringLiteralDfa1_3(0x900L);
      case 36:
         return jjStopAtPos(0, 30);
      case 37:
         return jjStopAtPos(0, 48);
      case 40:
         return jjStopAtPos(0, 27);
      case 41:
         return jjStopAtPos(0, 28);
      case 42:
         return jjStopAtPos(0, 46);
      case 43:
         return jjStopAtPos(0, 43);
      case 44:
         return jjStopAtPos(0, 24);
      case 45:
         return jjStopAtPos(0, 44);
      case 46:
         return jjStartNfaWithStates_3(0, 22, 4);
      case 47:
         return jjStopAtPos(0, 47);
      case 58:
         return jjStopAtPos(0, 20);
      case 59:
         return jjStopAtPos(0, 21);
      case 61:
         return jjStartNfaWithStates_3(0, 23, 1);
      case 64:
         return jjStopAtPos(0, 29);
      case 91:
         return jjStartNfaWithStates_3(0, 25, 9);
      case 93:
         return jjStartNfaWithStates_3(0, 26, 9);
      case 94:
         return jjStartNfaWithStates_3(0, 45, 9);
      case 97:
         return jjMoveStringLiteralDfa1_3(0x2000000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_3(0x40000L);
      case 101:
         return jjMoveStringLiteralDfa1_3(0x8200000000L);
      case 102:
         return jjMoveStringLiteralDfa1_3(0x2100000000L);
      case 105:
         return jjMoveStringLiteralDfa1_3(0x480020000L);
      case 108:
         return jjMoveStringLiteralDfa1_3(0x80000L);
      case 110:
         return jjMoveStringLiteralDfa1_3(0x54000000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_3(0x8000000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_3(0x20000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_3(0x10000010000L);
      case 115:
         return jjMoveStringLiteralDfa1_3(0x1000008000L);
      case 116:
         return jjMoveStringLiteralDfa1_3(0x800000000L);
      case 118:
         return jjMoveStringLiteralDfa1_3(0x4000L);
      case 119:
         return jjMoveStringLiteralDfa1_3(0x4000000000L);
      case 120:
         return jjMoveStringLiteralDfa1_3(0x20000000000000L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 35:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_3(active0, 0x4000000004000L);
      case 101:
         return jjMoveStringLiteralDfa2_3(active0, 0x10000010000L);
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_3(1, 31, 9);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_3(active0, 0x4000040000L);
      case 105:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_3(1, 32, 9);
         return jjMoveStringLiteralDfa2_3(active0, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa2_3(active0, 0x200000000L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0x2008000020000L);
      case 111:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_3(1, 35, 9);
         return jjMoveStringLiteralDfa2_3(active0, 0x70002000000000L);
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_3(1, 51, 9);
         return jjMoveStringLiteralDfa2_3(active0, 0x20000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_3(active0, 0x1000008000L);
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
static private int jjMoveStringLiteralDfa2_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_3(active0, 0x10000050000L);
      case 100:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 39, 9);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 49, 9);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_3(active0, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_3(active0, 0x24000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_3(active0, 0x4000000000000L);
      case 114:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 52, 9);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 53, 9);
         return jjMoveStringLiteralDfa3_3(active0, 0x200000c000L);
      case 115:
         return jjMoveStringLiteralDfa3_3(active0, 0x200080000L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_3(2, 17, 9);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 54, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_3(1, active0);
}
static private int jjMoveStringLiteralDfa3_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 40, 9);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 50, 9);
         break;
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_3(3, 33, 9);
         return jjMoveStringLiteralDfa4_3(active0, 0x2000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_3(active0, 0x8000L);
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_3(3, 16, 9);
         return jjMoveStringLiteralDfa4_3(active0, 0x4000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_3(active0, 0x20000000000L);
      case 112:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 36, 9);
         break;
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_3(3, 18, 9);
         break;
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_3(3, 14, 9);
         break;
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_3(3, 19, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_3(2, active0);
}
static private int jjMoveStringLiteralDfa4_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_3(active0, 0x2000000000L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 38, 9);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_3(active0, 0x8000L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 41, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_3(3, active0);
}
static private int jjMoveStringLiteralDfa5_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_3(active0, 0x2000000000L);
      case 103:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_3(5, 15, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_3(4, active0);
}
static private int jjMoveStringLiteralDfa6_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 104:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 37, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_3(5, active0);
}
static private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 16;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x7000000200000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(11, 12);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  break;
               case 1:
                  if (curChar == 61 && kind > 42)
                     kind = 42;
                  break;
               case 2:
                  if ((0x5000000000000000L & l) != 0L && kind > 42)
                     kind = 42;
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if (curChar == 39 && kind > 57)
                     kind = 57;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 34 && kind > 59)
                     kind = 59;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(0, 2);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 3);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 9:
                  if ((0x7fffffffffffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(9);
                  break;
               case 6:
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 11:
                  jjAddStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_2()
{
   return 1;
}
static private int jjMoveStringLiteralDfa0_1()
{
   return 1;
}
static final int[] jjnextStates = {
   14, 3, 15, 11, 12, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\166\141\162\163", "\163\164\162\151\156\147", "\162\145\141\154", 
"\151\156\164", "\143\150\141\162", "\154\151\163\164", "\72", "\73", "\56", "\75", "\54", 
"\133", "\135", "\50", "\51", "\100", "\44", "\151\146", "\146\151", 
"\145\154\163\145", "\151\156", "\164\157", "\163\164\145\160", "\146\157\162\145\141\143\150", 
"\167\150\151\154\145", "\145\156\144", "\162\145\141\144", "\160\162\151\156\164", null, "\53", 
"\55", "\136", "\52", "\57", "\45", "\141\156\144", "\156\141\156\144", "\157\162", 
"\156\157\162", "\170\157\162", "\156\157\164", null, null, null, null, null, "\12", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "INDENTING",
   "UNINDENTING",
   "IN_LINE",
   "comentario1",
   "comentario2",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, 3, 0, -1, -1, -1, 4, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
};
static final long[] jjtoToken = {
   0x1fffffffffffc019L, 
};
static final long[] jjtoSkip = {
   0x3fe2L, 
};
static final long[] jjtoMore = {
   0x4L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[16];
static private final int[] jjstateSet = new int[32];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public ZeLexTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public ZeLexTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 16; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 13 && (0x2000L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 2;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 3;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 4;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         try { input_stream.backup(0);
            while (curChar <= 10 && (0x400L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 10)
         {
            jjmatchedKind = 10;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 13)
         {
            jjmatchedKind = 13;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static int[] jjemptyLineNo = new int[6];
static int[] jjemptyColNo = new int[6];
static boolean[] jjbeenHere = new boolean[6];
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 2 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() &&
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if (image.length() > peek())
        {
            push(image.length());
            //System.out.print("(push " + stack + ")");
            SwitchTo(INDENTING);
        }
        else if (image.length() < peek())
        {
            while (image.length() < peek())
            {
                pop();
                //System.out.print("(pop " + stack +")");
                SwitchTo(UNINDENTING);
            }
            if (image.length() != peek())
            {
                //throw new TokenMgrError("Improper unindent.",
                //TokenMgrError.LEXICAL_ERROR);
                System.out.print("Error: Improper unindent.");
            }
        }
        else
        {
            SwitchTo(IN_LINE);
        }
         break;
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 0 :
         break;
      case 3 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.print("<INDENT>");
         break;
      case 4 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[2] &&
                jjemptyLineNo[2] == input_stream.getBeginLine() &&
                jjemptyColNo[2] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[2] = input_stream.getBeginLine();
            jjemptyColNo[2] = input_stream.getBeginColumn();
            jjbeenHere[2] = true;
         }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.print("<UNINDENT>");
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
