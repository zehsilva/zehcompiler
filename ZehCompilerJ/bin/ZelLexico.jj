/*  CompiladorExemplo.jj  -  Analisador Léxico */
options { 
  JDK_VERSION = "1.5"; 
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false; 
} 
PARSER_BEGIN(ZeLex) 
import java.io.*; 
public class ZeLex { 
   public static void main(String args[])  throws ParseException  { 
      ZeLex analisador = null;
      System.out.print("ZELLA - ZEL Lexical Analyzer"+"\n Arquivo: "+args[0]+"\n");
      try { 
         analisador = new ZeLex(new FileInputStream(args[0]));
         analisador.inicio();  
      }  
      catch(FileNotFoundException e) { 
         System.out.println("Erro: arquivo não encontrado "+args[0]); 
      } 
      catch(TokenMgrError e) { 
         System.out.println("Erro léxico\n" + e.getMessage()); 
      } 
   } 
} 
PARSER_END(ZeLex) 
TOKEN_MGR_DECLS:
{
    static Integer[] init_array = new Integer[] {new Integer(0)};
    static java.util.ArrayList<Integer> stack =
        new java.util.ArrayList<Integer>(java.util.Arrays.asList(init_array));
    static int peek() { return stack.get(stack.size() - 1); }
    static int pop() { return stack.remove(stack.size() - 1); }
    static void push(int i) { stack.add(i);}
}

<DEFAULT>
SKIP:
{
    "\r" // { System.out.print("(DEFAULT STATE - SKIP: CR)"); }
}

<DEFAULT>
MORE:
{        < " "|"t"|"" > // { System.out.print("(DEFAULT STATE - MORE: S)"); }
    {
        if (image.length() > peek())
        {
            push(image.length());
            //System.out.print("(push " + stack + ")");
            SwitchTo(INDENTING);
        }
        else if (image.length() < peek())
        {
            while (image.length() < peek())
            {
                pop();
                //System.out.print("(pop " + stack +")");
                SwitchTo(UNINDENTING);
            }
            if (image.length() != peek())
            {
                //throw new TokenMgrError("Improper unindent.",
                //TokenMgrError.LEXICAL_ERROR);
                System.out.print("Error: Improper unindent.");
            }
        }
        else
        {
            SwitchTo(IN_LINE);
        }
    }
}

<INDENTING>
TOKEN:
{
    <INDENT: ""> { System.out.print("<INDENT>"); } : IN_LINE
}

<UNINDENTING>
TOKEN:
{
    <UNINDENT: ""> { System.out.print("<UNINDENT>"); } : DEFAULT
}

<IN_LINE>
SKIP:
{
  " "
  | "\t"
  | "\r"
}
< IN_LINE >
SKIP : {      "!!" : comentario1
} 
<comentario1> SKIP: {
"\n" |
   <~[]> 
}
< IN_LINE >
SKIP : {
  			"!#": comentario2
  	}
  	<comentario2> SKIP: { 
   "#!"| 
   <~[]> 
}
< IN_LINE >
TOKEN : {
      < VAR_DCL: "vars" > |
      < TP_STRING: "string" >|
      < TP_REAL: "real" >|
      < TP_INT: "int" >|
      < TP_CHAR: "char" >|
      < TP_LIST: "list" >|
      < DOISP: ":" >|
      < PNTVIRG: ";" >    |
      < PNT: ".">|
      < ATRIB: "=" >|
      < VIRG: "," >|
      < ABRERET: "[" >|
      < FECHARET: "]" >|
      < ABREPAR: "(" >|
      < FECHAPAR: ")" >|
      < ARROBA: "@" >|
      < DOLLAR: "$" >|
      < IF : "if" >|
      < FI: "fi" >|
      < ELSE: "else" >|
      < IN: "in" >|
      < TO: "to" >|
      < STEP: "step" >|
      < FOREACH: "foreach" >|
      < WHILE: "while" >|
      < END: "end" >|
      < READ: "read" >|
      < PRINT: "print" >|
      < OPER_REL: (["!","=","<",">"])?"="|">"|"<" >|
      < PLUS: "+">|
      < MINUS: "-" >|
      < EXP: "^" >|
      < MULT: "*" >| 
      < DIV: "/">|
      < MOD: "%" >|
      < AND: "and" >|
      < NAND: "nand" >|
      < OR: "or" >|
      < NOR: "nor" >|
      < XOR: "xor" >|
      < NOT: "not" >|
      < NUM_REAL: (["0"-"9"])*"."(["0"-"9"])+ >|
      < NUM_INT: (["0"-"9"])+ >|
      < CHAR: "'"(~["'"])"'" >|
      < VAR:   ["A"-"z","_"](["A"-"z","0"-"9","_"])* >  |
      < STRING: "\""(~["\""])*"\"" >|
      < EOL: "\n" > : DEFAULT}
  
JAVACODE void inicio() 
{
   Token t; 
   do { 
      t = getNextToken(); 
      System.out.println(tokenImage[t.kind]+"\t"+t.image);  
   }
   while(t.kind != EOF);  
}