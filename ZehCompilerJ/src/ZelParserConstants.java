/* Generated By:JavaCC: Do not edit this line. ZelParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ZelParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int VAR_DCL = 10;
  /** RegularExpression Id. */
  int TP_STRING = 11;
  /** RegularExpression Id. */
  int TP_REAL = 12;
  /** RegularExpression Id. */
  int TP_INT = 13;
  /** RegularExpression Id. */
  int TP_CHAR = 14;
  /** RegularExpression Id. */
  int TP_LIST = 15;
  /** RegularExpression Id. */
  int DOISP = 16;
  /** RegularExpression Id. */
  int PNTVIRG = 17;
  /** RegularExpression Id. */
  int PNT = 18;
  /** RegularExpression Id. */
  int ATRIB = 19;
  /** RegularExpression Id. */
  int VIRG = 20;
  /** RegularExpression Id. */
  int ABRERET = 21;
  /** RegularExpression Id. */
  int FECHARET = 22;
  /** RegularExpression Id. */
  int ABREPAR = 23;
  /** RegularExpression Id. */
  int FECHAPAR = 24;
  /** RegularExpression Id. */
  int ARROBA = 25;
  /** RegularExpression Id. */
  int DOLLAR = 26;
  /** RegularExpression Id. */
  int IF = 27;
  /** RegularExpression Id. */
  int FI = 28;
  /** RegularExpression Id. */
  int ELSE = 29;
  /** RegularExpression Id. */
  int IN = 30;
  /** RegularExpression Id. */
  int TO = 31;
  /** RegularExpression Id. */
  int STEP = 32;
  /** RegularExpression Id. */
  int FOREACH = 33;
  /** RegularExpression Id. */
  int WHILE = 34;
  /** RegularExpression Id. */
  int END = 35;
  /** RegularExpression Id. */
  int READ = 36;
  /** RegularExpression Id. */
  int PRINT = 37;
  /** RegularExpression Id. */
  int OPER_REL = 38;
  /** RegularExpression Id. */
  int PLUS = 39;
  /** RegularExpression Id. */
  int MINUS = 40;
  /** RegularExpression Id. */
  int EXP = 41;
  /** RegularExpression Id. */
  int MULT = 42;
  /** RegularExpression Id. */
  int DIV = 43;
  /** RegularExpression Id. */
  int MOD = 44;
  /** RegularExpression Id. */
  int AND = 45;
  /** RegularExpression Id. */
  int NAND = 46;
  /** RegularExpression Id. */
  int OR = 47;
  /** RegularExpression Id. */
  int NOR = 48;
  /** RegularExpression Id. */
  int XOR = 49;
  /** RegularExpression Id. */
  int NOT = 50;
  /** RegularExpression Id. */
  int NUM_REAL = 51;
  /** RegularExpression Id. */
  int NUM_INT = 52;
  /** RegularExpression Id. */
  int CHAR = 53;
  /** RegularExpression Id. */
  int VAR = 54;
  /** RegularExpression Id. */
  int EOL = 55;
  /** RegularExpression Id. */
  int INDENT = 56;
  /** RegularExpression Id. */
  int DEDENT = 57;
  /** RegularExpression Id. */
  int STRING = 58;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int comentario1 = 1;
  /** Lexical state. */
  int comentario2 = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"!!\"",
    "\"\\n\"",
    "<token of kind 6>",
    "\"!#\"",
    "\"#!\"",
    "<token of kind 9>",
    "\"vars\"",
    "\"string\"",
    "\"real\"",
    "\"int\"",
    "\"char\"",
    "\"list\"",
    "\":\"",
    "\";\"",
    "\".\"",
    "\"=\"",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"@\"",
    "\"$\"",
    "\"if\"",
    "\"fi\"",
    "\"else\"",
    "\"in\"",
    "\"to\"",
    "\"step\"",
    "\"foreach\"",
    "\"while\"",
    "\"end\"",
    "\"read\"",
    "\"print\"",
    "<OPER_REL>",
    "\"+\"",
    "\"-\"",
    "\"^\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"and\"",
    "\"nand\"",
    "\"or\"",
    "\"nor\"",
    "\"xor\"",
    "\"not\"",
    "<NUM_REAL>",
    "<NUM_INT>",
    "<CHAR>",
    "<VAR>",
    "\"\\n\"",
    "\"{\"",
    "\"}\"",
    "<STRING>",
  };

}
